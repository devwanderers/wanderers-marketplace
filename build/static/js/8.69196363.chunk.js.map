{"version":3,"sources":["components/Profile/NftProfileDisplay.js","assets/svg/frames/BannerProfile.js","components/Profile/UserInfo.js","store/reducers/nftAvatars/selectors.js","store/reducers/nftAvatars/hooks.js","store/reducers/profile/selectors.js","hooks/useDebounce.js","hooks/useTimeout.js","store/reducers/profile/hook.js","views/Profile.js"],"names":["NftProfileDisplay","image","nftsLength","loading","renderImage","src","alt","className","size","width","height","style","padding","SvgComponent","props","ref","xmlns","viewBox","opacity","fill","d","BannerProfile","forwardRef","UserInfo","nftId","nftDNA","cls","title","formatAddress","nftAvatarsReducerSelector","createSelector","state","nftAvatars","nftIdSelector","nftAvatar","nftIds","nftsSelector","nfts","useFetchNftAvatars","useActiveWeb3React","account","library","dispatch","useDispatch","nftsIds","useSelector","fetcNftIDS","useCallback","a","contract","eth","Contract","AvatarDestinareAbi","process","actions","pending","methods","walletOfOwner","call","then","res","fulfilled","catch","err","console","log","rejected","useEffect","useFetchNftAvatarId","fetchNftAvatarsData","promises","reduce","acc","v","tokenURI","Promise","all","uris","urisPromises","uri","newUri","replace","fetch","json","length","profileReducerSelector","profile","useDebounce","callback","delay","dependencies","callbackRef","useRef","timeoutRef","current","set","setTimeout","clear","clearTimeout","reset","useTimeout","useSetAvatar","avatar","useState","initialAvatar","setInitialAvatar","saveAvatar","idAvatar","cb","address","useSaveAvatar","Profile","fetchProfile","error","payload","message","edition","toString","findIndex","n","useFetchProfile","nftsLands","useFetchNftLands","nftIndex","index","useSelectedAvatar","useNftsReducer","setAvatar","lands","setLands","handleNextAvatar","handlePreAvatar","l","place","attributes","value","id","nft","dna","name","disabled","onClick","Tabs","tabContainerClassName","panelContainerClassName","tab","map","f","CardNftMarket","isProfile","country"],"mappings":"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","file":"static/js/8.69196363.chunk.js","sourcesContent":["import React from 'react'\nimport { RankFrameSVG } from '../../assets/svg/frames'\nimport { FaSpinner } from 'react-icons/fa'\nimport { IoPersonCircle } from 'react-icons/io5'\n\nconst NftProfileDisplay = ({ image, nftsLength, loading }) => {\n    let renderImage = null\n\n    if (!loading && image)\n        renderImage = (\n            <img\n                src={image}\n                alt={image}\n                className=\"w-full h-full object-fill\"\n            />\n        )\n    if (!loading && nftsLength === 0)\n        renderImage = (\n            <div className=\" text-white h-full w-full flex flex-col justify-center items-center\">\n                <IoPersonCircle size={'50%'} />\n                <p className=\"text-center text-white px-10\">\n                    Remember!! in order to receive rewards you have to hold at\n                    least one nomad\n                </p>\n            </div>\n        )\n\n    return (\n        <div className=\"relative\">\n            <div className=\"absolute left-0 right-0 -top-0 bottom-0 \">\n                <div className=\"w-full h-full\">\n                    <RankFrameSVG width={'100%'} height={'100%'} />\n                </div>\n            </div>\n            {loading && (\n                <div className=\"absolute left-0 right-0 h-full w-full flex items-center justify-center\">\n                    <FaSpinner\n                        className={`animate-spin text-3xl text-primary`}\n                    />\n                </div>\n            )}\n            <div\n                className=\"h-80 lg:h-56 xl:h-72 2xl:h-20rem w-full overflow-hidden\"\n                style={{ padding: '5.5%' }}\n            >\n                {renderImage}\n            </div>\n        </div>\n    )\n}\n\nexport default NftProfileDisplay\n","import * as React from 'react'\nimport { forwardRef } from 'react'\n\nconst SvgComponent = (props, ref) => (\n    <svg\n        data-name=\"Capa 1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 190.38 54.24\"\n        ref={ref}\n        {...props}\n    >\n        <g\n            style={{\n                opacity: 0.18,\n            }}\n        >\n            <path\n                style={{\n                    fill: '#09adc2',\n                }}\n                d=\"M4.92 1.97h180.53v50.3H4.92z\"\n            />\n        </g>\n        <path\n            style={{\n                fill: '#09adc2',\n            }}\n            d=\"M185.46 0h2.3v54.24h-2.3zM2.63 0h2.3v54.24h-2.3zM0 0h1.31v54.24H0zM189.07 0h1.31v54.24h-1.31z\"\n        />\n    </svg>\n)\n\nconst BannerProfile = forwardRef(SvgComponent)\nexport default BannerProfile\n","import React from 'react'\nimport BannerProfile from './../../assets/svg/frames/BannerProfile'\nimport { cls } from './../../services/helpers'\nimport { formatAddress } from './../../services/address-services'\nimport { Tooltip } from 'antd'\n\nconst UserInfo = ({ className, nftId, nftDNA }) => {\n    return (\n        <div className={cls(`relative ${className}`)}>\n            <div className=\"absolute top-0 left-0 w-full h-full flex items-center\">\n                <div className=\"px-5\">\n                    <p className=\"text-light-0 text-xl gap-2\">\n                        <strong>ID:</strong> {nftId}\n                    </p>\n                    <p className=\"text-light-0 text-xl gap-2\">\n                        <Tooltip title={nftDNA}>\n                            <strong>DNA:</strong> {formatAddress(nftDNA)}\n                        </Tooltip>\n                    </p>\n                </div>\n            </div>\n            <BannerProfile width=\"100%\" />\n        </div>\n    )\n}\n\nexport default UserInfo\n","import { createSelector } from 'reselect'\n\nexport const nftAvatarsReducerSelector = createSelector(\n    (state) => state.nftAvatars,\n    (nftAvatars) => nftAvatars\n)\n\nexport const nftIdSelector = createSelector(\n    nftAvatarsReducerSelector,\n    (nftAvatar) => nftAvatar.nftIds\n)\n\nexport const nftsSelector = createSelector(\n    nftAvatarsReducerSelector,\n    (nftAvatar) => nftAvatar.nfts\n)\n","/* eslint-disable no-unused-vars */\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    nftIdSelector,\n    nftsSelector,\n    nftAvatarsReducerSelector,\n} from './selectors'\nimport * as actions from './actions'\nimport AvatarDestinareAbi from '../../../abi/AvatarDestinare.json'\nimport useActiveWeb3React from './../../../hooks/useActiveWeb3React'\n\nexport const useNftAvatarReducer = () => {\n    return useSelector(nftAvatarsReducerSelector)\n}\n\nexport const useFetchNftAvatarId = () => {\n    const { account, library } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    const nftsIds = useSelector(nftIdSelector)\n    const fetcNftIDS = useCallback(async () => {\n        const contract = new library.eth.Contract(\n            AvatarDestinareAbi,\n            process.env.REACT_APP_AVATAR_DESTINARE_CONTRACT_ADDRESS\n        )\n        dispatch(actions.setNftIDsAvatar.pending())\n        contract.methods\n            .walletOfOwner(account)\n            .call()\n            .then((res) => dispatch(actions.setNftIDsAvatar.fulfilled(res)))\n            .catch((err) => {\n                console.log('Failed to get nft ids', err)\n                dispatch(actions.setNftIDsAvatar.rejected(err))\n                throw err\n            })\n    }, [library, dispatch])\n\n    useEffect(() => {\n        if (account) {\n            fetcNftIDS()\n        }\n    }, [account])\n\n    return nftsIds\n}\n\nexport const useFetchNftAvatars = () => {\n    const nftIds = useFetchNftAvatarId()\n    const { account, library } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    const nfts = useSelector(nftsSelector)\n\n    const fetchNftAvatarsData = useCallback(async () => {\n        const contract = new library.eth.Contract(\n            AvatarDestinareAbi,\n            process.env.REACT_APP_AVATAR_DESTINARE_CONTRACT_ADDRESS\n        )\n        // const dummys = ['1', '2', '3']\n        const promises = nftIds.reduce((acc, v) => {\n            return [...acc, contract.methods.tokenURI(v).call()]\n        }, [])\n        dispatch(actions.setNftAvatar.pending())\n        console.log({ promises })\n        Promise.all(promises)\n            .then((uris) => {\n                const urisPromises = uris.reduce((acc, uri) => {\n                    const newUri = uri.replace(\n                        /^ipfs?:\\/\\//,\n                        'https://nomadzland.mypinata.cloud/ipfs/'\n                    )\n                    console.log({ newUri })\n                    return [...acc, fetch(newUri).then((res) => res.json())]\n                }, [])\n                Promise.all(urisPromises)\n                    .then((nfts) => {\n                        dispatch(actions.setNftAvatar.fulfilled(nfts))\n                    })\n                    .catch((err) => {\n                        console.log('Failed to get nfts', err)\n                        dispatch(actions.setNftAvatar.rejected(err))\n                        throw err\n                    })\n            })\n            .catch((err) => {\n                console.log('Failed to get nfts', err)\n                dispatch(actions.setNftAvatar.rejected(err))\n                throw err\n            })\n    }, [nftIds, library, dispatch])\n\n    useEffect(() => {\n        if (account && nftIds.length > 0) fetchNftAvatarsData()\n    }, [account, nftIds])\n\n    return nfts\n}\n\n// 1.\n","import { createSelector } from 'reselect'\n\nexport const profileReducerSelector = createSelector(\n    (state) => state.profile,\n    (profile) => profile\n)\n","import { useEffect } from 'react'\r\nimport useTimeout from './useTimeout'\r\n\r\nexport default function useDebounce(callback, delay, dependencies) {\r\n    const { reset, clear } = useTimeout(callback, delay)\r\n    useEffect(reset, [...dependencies, reset])\r\n    useEffect(clear, [])\r\n}\r\n","import { useCallback, useEffect, useRef } from 'react'\r\n\r\nexport default function useTimeout(callback, delay) {\r\n    const callbackRef = useRef(callback)\r\n    const timeoutRef = useRef()\r\n\r\n    useEffect(() => {\r\n        callbackRef.current = callback\r\n    }, [callback])\r\n\r\n    const set = useCallback(() => {\r\n        timeoutRef.current = setTimeout(() => callbackRef.current(), delay)\r\n    }, [delay])\r\n\r\n    const clear = useCallback(() => {\r\n        timeoutRef.current && clearTimeout(timeoutRef.current)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        set()\r\n        return clear\r\n    }, [delay, set, clear])\r\n\r\n    const reset = useCallback(() => {\r\n        clear()\r\n        set()\r\n    }, [clear, set])\r\n\r\n    return { reset, clear }\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { nftsSelector } from './../nftAvatars/selectors'\nimport * as actions from './actions'\n\nimport { profileReducerSelector } from './selectors'\nimport useDebounce from './../../../hooks/useDebounce'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\nexport const useSelectedAvatar = () => {\n    const nfts = useSelector(nftsSelector)\n    const { avatar } = useSelector(profileReducerSelector)\n    const nftIndex = nfts.findIndex((n) => n.edition.toString() === avatar)\n\n    return nftIndex !== -1\n        ? { index: nftIndex, avatar: nfts[nftIndex] }\n        : { index: null, avatar: null }\n}\n\nexport const useSaveAvatar = () => {\n    const { account } = useActiveWeb3React()\n    const dispatch = useDispatch()\n\n    return useCallback(\n        (idAvatar, cb) => {\n            dispatch(\n                actions.setProfile({\n                    address: account,\n                    avatar: idAvatar,\n                })\n            ).then(() => cb())\n        },\n        [dispatch]\n    )\n}\n\nexport const useSetAvatar = () => {\n    const { avatar } = useSelector(profileReducerSelector)\n    const [initialAvatar, setInitialAvatar] = useState(avatar)\n    const saveAvatar = useSaveAvatar()\n    const dispatch = useDispatch()\n\n    useDebounce(\n        () => {\n            if (initialAvatar !== avatar && avatar) {\n                saveAvatar(avatar, () => setInitialAvatar(avatar))\n            }\n        },\n        2000,\n        [avatar, initialAvatar]\n    )\n\n    return useCallback(\n        (idAvatar) => {\n            dispatch(actions.setAvatar(idAvatar))\n        },\n        [dispatch]\n    )\n}\n\nexport const useFetchProfile = () => {\n    const { account } = useActiveWeb3React()\n    const nfts = useSelector(nftsSelector)\n    const dispatch = useDispatch()\n\n    const fetchProfile = useCallback(async () => {\n        dispatch(actions.getProfile(account)).then((res) => {\n            if (\n                res?.error &&\n                res?.payload.message === \"Profile doesn't exist\"\n            ) {\n                dispatch(\n                    actions.setProfile({\n                        address: account,\n                        avatar: nfts[0].edition.toString(),\n                    })\n                )\n            }\n            if (res?.payload?.profile) {\n                const { avatar } = res.payload.profile\n                const nftIndex = nfts.findIndex(\n                    (n) => n.edition.toString() === avatar\n                )\n                if (nftIndex === -1) {\n                    // Updating Selected NFT\n                    dispatch(\n                        actions.setProfile({\n                            address: account,\n                            avatar: nfts[0].edition.toString(),\n                        })\n                    )\n                }\n            }\n        })\n    }, [nfts, account, dispatch])\n\n    useEffect(() => {\n        if (account && nfts.length > 0) fetchProfile()\n    }, [account, nfts])\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport { FaArrowCircleLeft, FaArrowCircleRight } from 'react-icons/fa'\n\nimport Tabs, { TabPane } from '../components/Tabs/Tabs'\nimport CardNftMarket from './../components/Cards/CardNftMarket'\n// import { lands } from './../constants/nftsDummy'\nimport NftProfileDisplay from '../components/Profile/NftProfileDisplay'\nimport UserInfo from '../components/Profile/UserInfo'\nimport {\n    useFetchNftAvatars,\n    useNftAvatarReducer,\n} from '../store/reducers/nftAvatars/hooks'\nimport {\n    useFetchNftLands,\n    useNftsReducer,\n} from './../store/reducers/nfts/hooks'\nimport {\n    useSetAvatar,\n    useFetchProfile,\n    useSelectedAvatar,\n} from './../store/reducers/profile/hook'\n\nconst Profile = () => {\n    useFetchNftAvatars()\n    useFetchProfile()\n\n    const nftsLands = useFetchNftLands()\n\n    const { fetch, nfts } = useNftAvatarReducer()\n    const { index, avatar } = useSelectedAvatar()\n    const { fetch: fetchLands, nfts: nftLands } = useNftsReducer()\n    const setAvatar = useSetAvatar()\n    const [lands, setLands] = useState([])\n\n    const handleNextAvatar = useCallback(() => {\n        if (index === nfts.length - 1) setAvatar(nfts[0].edition.toString())\n        if (index !== nfts.length - 1)\n            setAvatar(nfts[index + 1].edition.toString())\n    }, [nfts, index])\n\n    const handlePreAvatar = useCallback(() => {\n        if (index === 0) setAvatar(nfts[nfts.length - 1].edition.toString())\n        if (index !== 0) setAvatar(nfts[index - 1].edition.toString())\n    }, [nfts, index])\n\n    useEffect(() => {\n        if (nftsLands.length > 0) {\n            const l = nftsLands.reduce((acc, n) => {\n                const place = n.attributes[0].value\n\n                return [\n                    ...acc,\n                    {\n                        id: place,\n                        title: place,\n                        nft: n.image,\n                    },\n                ]\n            }, [])\n            setLands(l)\n        }\n    }, [nftsLands])\n\n    return (\n        <div className=\"flex-1 flex bg-blue-7\">\n            <div className=\"max-w-1280px flex-1 mx-auto flex flex-row bg-blue-4\">\n                <div className=\"flex flex-col lg:flex-row h-full\">\n                    <div className=\"w-full lg:w-3/12 2xl:w-96  border-b-2 lg:border-r-2 border-blue-5 h-full pt-8 lg:pt-16 pb-4\">\n                        <div\n                            className=\"w-full flex flex-col justify-center items-center \"\n                            // style={{ height: '450px' }}\n                        >\n                            <div className=\"w-80 lg:w-56 xl:w-72 2xl:w-20rem\">\n                                <NftProfileDisplay\n                                    loading={!fetch}\n                                    nftsLength={nfts?.length}\n                                    image={avatar?.image}\n                                />\n                                {avatar?.dna && (\n                                    <UserInfo\n                                        className=\"mt-5\"\n                                        nftDNA={avatar?.dna}\n                                        nftId={avatar?.name}\n                                    />\n                                )}\n                                {nfts.length > 1 && (\n                                    <div className=\"flex flex-row items-center justify-center h-full mt-5\">\n                                        <div className=\"flex-1 flex justify-center\">\n                                            <button\n                                                disabled={\n                                                    nfts.length === 0 ||\n                                                    nfts.length === 1\n                                                }\n                                                onClick={() =>\n                                                    handlePreAvatar()\n                                                }\n                                                className=\"text-3xl text-primary disabled:opacity-70 transform active:scale-75\"\n                                            >\n                                                <FaArrowCircleLeft />\n                                            </button>\n                                        </div>\n                                        <div className=\"flex-1 flex justify-center text-primary\">\n                                            <button\n                                                disabled={\n                                                    nfts.length === 0 ||\n                                                    nfts.length === 1\n                                                }\n                                                onClick={() =>\n                                                    handleNextAvatar()\n                                                }\n                                                className=\"text-3xl disabled:opacity-70 transform active:scale-75\"\n                                            >\n                                                <FaArrowCircleRight />\n                                            </button>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex-1\">\n                        <Tabs\n                            tabContainerClassName=\" px-6 2xl:px-10\"\n                            panelContainerClassName=\"py-16 bg-blue-4 \"\n                        >\n                            <TabPane\n                                tab=\"Destinations\"\n                                className=\"px-6 2xl:px-10\"\n                            >\n                                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-4 gap-4\">\n                                    {lands.map((f) => {\n                                        return (\n                                            <div\n                                                key={`${f.country}-${f.title}`}\n                                            >\n                                                <CardNftMarket\n                                                    id={f.id}\n                                                    nft={f.nft}\n                                                    title={f.title}\n                                                    isProfile\n                                                />\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile\n"],"sourceRoot":""}